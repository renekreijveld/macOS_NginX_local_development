#!/bin/bash

# jbackup -- backup a Joomla website to a tar.gz file
#
# This scripts supports Joomla versions 1,0+
#
# Copyright 2014+ Rene Kreijveld - email@renekreijveld.nl
# This program is free software; you may redistribute it and/or modify it.
#
# Warning! This script needs the file jfunctions. This has to be installed in the same directory as this script.
#
# Version history
# 1.0 Initial version
# 1.1 Added usage
# 1.2 Code rewrite and remove -e option in echos
# 1.3 Typo correction
# 1.4 Added test if jfunctions exists
# 1.5 Added improved tests if files already exist and added -t and -z options

# general variables
MYPATH=$(cd "$(dirname "$0")"; pwd -P)
MYNAME=$(basename "$0")

# Check if jfunctions script exists
if [[ ! -f "${MYPATH}/jfunctions" ]]; then
    echo "Error: Required script 'jfunctions' not found in ${MYPATH}. Exiting."
    exit 1
else
    # Gather Joomla information
    source "${MYPATH}/jfunctions"
fi

# version
VERSION=1.0

# show message function
showmessage() {
    if [ "${SILENT}" == "no" ]; then
        echo "$1"
    fi
}

# Initialise BACKFUPFILE
BACKUPFILE=""

# Function to check if the backupfile already exists
backup_exists() {
    if [ "${ZIP}" == "no" ]
    then
        BACKUPFILE="${sitename}${NOW}.tgz"
    else
        BACKUPFILE="${sitename}${NOW}.zip"
    fi
    if [ -e ${BACKUPFILE} ]; then
        if [ "${OVERWRITE}" == "no" ]; then
            echo "Error: backup file ${BACKUPFILE} already exists. Use -o to overwrite."
            exit 1
        fi
    fi
}

# display usage information
usage() {
    echo ""
    echo "${MYNAME} version ${VERSION}, written by Rene Kreijveld."
    echo ""
    echo "Usage: ${MYNAME} [-z] [-t] [-o] [-m] [-s] [-h]"
    echo ""
    echo "Default action is .tgz backup."
    echo "-z Zip. Backup to a zipfile instead of a tgzfile."
    echo "-t Add a date/time-stamp to the backup file."
    echo "-o Overwrite existing backupfile and/or database dump."
    echo "-m Move backup to Development/Backup/sites folder."
    echo "-s silent, no messages will be shown (optional)."
    echo "-h Help. Display this info."
    echo ""
    echo "Run ${MYNAME} at the root of your website, where the configuration.php is."
    echo ""
    exit 0
}

ZIP="no"
SILENT="no"
OVERWRITE="no"
TIMESTAMP="no"
STOREDIR="."
while getopts ztomsh opt; do
    case "${opt}" in
    z)
        ZIP="yes"
        ;;
    t)
        TIMESTAMP="yes"
        ;;
    o)
        OVERWRITE="yes"
        ;;
    m)
        STOREDIR="/Users/${USER}/Development/Backup/sites"
        ;;
    s)
        SILENT="yes"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        usage
        ;;
    esac
done

# create date/time stamp
if [ "${TIMESTAMP}" == "yes" ]; then
    NOW=$(date +".%Y%m%d.%H%M%S")
else
    NOW=""
fi

showmessage "${MYNAME} version ${VERSION}, written by Rene Kreijveld."
# Check if database dump exists
if [ -e ${database}.sql ]; then
    if [ "${OVERWRITE}" == "no" ]; then
        echo "Error: Database dump ${database}.sql already exists. Use -o to overwrite."
        exit 1
    fi
fi

# Check if backupfile exists
if [ "${ZIP}" == "no" ]
then
    BACKUPFILE="${STOREDIR}/${sitename}${NOW}.tgz"
else
    BACKUPFILE="${STOREDIR}/${sitename}${NOW}.zip"
fi
if [ -e ${BACKUPFILE} ]; then
    if [ "${OVERWRITE}" == "no" ]; then
        echo "Error: backup file ${BACKUPFILE} already exists. Use -o to overwrite."
        exit 1
    fi
fi

showmessage "This is a Joomla! ${jversion} site. Starting backup ..."

# Check if a .vscode folder exists
if [ -e .vscode ]; then
    VSCODE=".vscode/"
else
    VSCODE=""
fi

# Check if a .git folder exists
if [ -d .git ]; then
    GIT=".git"
else
    GIT=""
fi

# Check if .gitignore exists
if [ -e .gitignore ]; then
    GITIGNORE=".gitignore"
else
    GITIGNORE=""
fi

# check if htaccess is present
if [ -e .htaccess ]
then
    HTACCESS=".htaccess"
else
    HTACCESS=""
fi

showmessage "Create database dump."
jdbdump > /dev/null

showmessage "Create backup."
# create the backup
if [ "${ZIP}" == "no" ]
then
    tar czf ${BACKUPFILE} ${VSCODE} ${GIT} ${GITIGNORE} ${HTACCESS} *
else
    zip -q -r ${BACKUPFILE} ${VSCODE} ${GIT} ${GITIGNORE} ${HTACCESS} *
fi

# Cleanup database dump
rm -f ${database}.sql

echo "Your backup is ready in file ${BACKUPFILE}."
