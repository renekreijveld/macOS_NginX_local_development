#!/bin/bash

# addsite - add a new site to the local NginX configuration
#
# Written by René Kreijveld - email@renekreijveld.nl
# This script is free software; you may redistribute it and/or modify it.
# This script comes without any warranty. Use it at your own risk.
#
# Version history
# 1.0 Initial version
# 1.1 Added Joomla download option

# Variables 

# version
VERSION=1.1
# name of this
MYNAME=$(basename ${0})
# default index.php template
INDEX_TEMPLATE=/opt/homebrew/etc/nginx/templates/index.php
# nginx folder for website configurations
NGINX_CONF_DIR=/opt/homebrew/etc/nginx/servers
# nginx configuration template
NGINX_CONFIG_TEMPLATE=/opt/homebrew/etc/nginx/templates/template.conf
# folder for phpdev configuration
CONFIG_DIR="${HOME}/.config/phpdev"
# path to the phpdev configuration file
CONFIG_FILE="${CONFIG_DIR}/config"

# show message function
showmessage() {
    if [ "${SILENT}" == "no" ]; then
        echo "$1"
    fi
}

# display usage information
usage() {
    echo ""
    echo "${MYNAME} version ${VERSION}, written by René Kreijveld."
    echo ""
    echo "Usage: ${MYNAME} -n <website_name> -p <php_version> [-d <database_name>] [-j] [-o] [-s] [-h]"
    echo ""
    echo " -n the website name for the new website (input without spaces, mandatory)."
    echo " -p the PHP version for the new website (mandatory)."
    echo " -d the database name for the new website (optional)."
    echo " -j download and install the latest Joomla version (optional)."
    echo " -o open the new website in the browser after creation (optional)."
    echo " -s silent, no messages will be shown (optional)."
    echo " -h display this help."
    echo ""
    exit 0
}

# Function to check if the site name contains spaces
contains_spaces() {
    if [[ "$1" =~ \  ]]; then
        return 0
    else
        return 1
    fi
}

# Function to check if PHP version is valid
is_valid_php_version() {
    PHP_VERSION=$1
    if [ -d "/opt/homebrew/etc/php/${PHP_VERSION}" ]; then
        return 0
    else
        return 1
    fi
}

# Function to check if database exists
database_exists() {
    DATABASE_NAME=$1
    if mysql -u root -proot -e "use ${DATABASE_NAME}" 2>/dev/null; then
        return 0
    else
        return 1
    fi
}

# Parse command line arguments
SILENT="no"
OPEN="no"
JOOMLA="no"
while getopts ":n:p:d:josh" opt; do
    case ${opt} in
    n)
        WEBSITE_NAME=$OPTARG
        ;;
    p)
        PHP_VERSION=$OPTARG
        ;;
    d)
        DATABASE_NAME=$OPTARG
        ;;
    j)
        JOOMLA="yes"
        ;;
    o)
        OPEN="yes"
        ;;
    s)
        SILENT="yes"
        ;;
    h)
        usage
        ;;
    \?)
        echo "Invalid option: -$OPTARG" >&2
        usage
        ;;
    :)
        echo "Option -$OPTARG requires an argument." >&2
        usage
        ;;
    esac
done

showmessage "${MYNAME} version ${VERSION}, written by René Kreijveld."

# Check if the configuration file exists
if [[ ! -f "${CONFIG_FILE}" ]]; then
    echo "Error: configuration file ${CONFIG_FILE} not found, exiting."
    exit 1
fi   

showmessage "Add new website ${WEBSITE_NAME} to the NginX configuration."

# check if mandatory parameters are provided
if [ -z "${WEBSITE_NAME}" ] || [ -z "${PHP_VERSION}" ]; then
    echo "Error: -n, and -p are mandatory parameters."
    exit 1
fi

# check if the site name contains spaces
if contains_spaces "${WEBSITE_NAME}"; then
    echo "Error: Site name '$name' contains spaces. Please provide a name without spaces."
    exit 1
fi

# check if the PHP version is valid
if ! is_valid_php_version "${PHP_VERSION}"; then
    echo "Error: PHP version ${PHP_VERSION} is not installed."
    echo "Installed PHP versions are:"
    ls /opt/homebrew/etc/php
    exit 1
fi

# Check if the site folder already exists
SITE_FOLDER="/Users/$USER/Development/Sites/${WEBSITE_NAME}"
if [ -d "${SITE_FOLDER}" ]; then
    echo "Error: The website folder '$site_folder' already exists."
    exit 1
fi

# check if the database name contains spaces
if contains_spaces "${DATABASE_NAME}"; then
    echo "Error: Database name '${DATABASE_NAME}' contains spaces. Please provide a name without spaces."
    exit 1
fi

# Check if the database already exists
if [ ! -z "${DATABASE_NAME}" ]; then
    if database_exists "${DATABASE_NAME}"; then
        echo "Error: The database '${DATABASE_NAME}' already exists."
        exit 1
    fi
fi

# Create the website directory
WEBSITE_DIR=~/Development/Sites/${WEBSITE_NAME}
showmessage "Create website root folder ${WEBSITE_DIR}."
mkdir -p ${WEBSITE_DIR}

# Copy and modify the index.php website template
INDEX_PHP_FILE=${WEBSITE_DIR}/index.php
showmessage "Installing index.php in root folder ${WEBSITE_NAME}."
cp ${INDEX_TEMPLATE} ${INDEX_PHP_FILE}
sed -i '' "s/#website_name#/${WEBSITE_NAME}/g" ${INDEX_PHP_FILE}
sed -i '' "s/#username#/${USER}/g" ${INDEX_PHP_FILE}
sed -i '' "s/#database_name#/${DATABASE_NAME}/g" ${INDEX_PHP_FILE}
sed -i '' "s/#php_version#/${PHP_VERSION}/g" ${INDEX_PHP_FILE}

# Set the php-fpm URL based on the PHP version
case ${PHP_VERSION} in
"7.4")
    PHP_FPM_URL="127.0.0.1:9074"
    ;;
"8.1")
    PHP_FPM_URL="127.0.0.1:9081"
    ;;
"8.2")
    PHP_FPM_URL="127.0.0.1:9082"
    ;;
"8.3")
    PHP_FPM_URL="127.0.0.1:9083"
    ;;
"8.4")
    PHP_FPM_URL="127.0.0.1:9084"
    ;;
esac

# Copy and modify the nginx configuration template
NGINX_CONF_FILE=${NGINX_CONF_DIR}/${WEBSITE_NAME}.conf
cp ${NGINX_CONFIG_TEMPLATE} ${NGINX_CONF_FILE}
chmod 700 ${NGINX_CONF_FILE}
sed -i '' "s/<website_name>/${WEBSITE_NAME}/g" ${NGINX_CONF_FILE}
sed -i '' "s/<your_username>/${USER}/g" ${NGINX_CONF_FILE}
sed -i '' "s/<php_fpm_url>/${PHP_FPM_URL}/g" ${NGINX_CONF_FILE}

if [ ! -z "${DATABASE_NAME}" ]; then
    adddb -d ${DATABASE_NAME} -s
    showmessage "Database ${DATABASE_NAME} created."
fi

showmessage "Restarting nginx, you may need to enter your password."
sudo brew services restart nginx

if [ "${JOOMLA}" == "yes" ]; then
    showmessage "Downloading and extracting the latest Joomla version."
    cd ${WEBSITE_DIR}
    latestjoomla
fi

if [ "${OPEN}" == "yes" ]; then
    open "https://${WEBSITE_NAME}.dev.test"
fi
